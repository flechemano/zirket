import os
import io
import subprocess

CARGO_TOML_TEMPLATE = """[package]
name = "{project_name}"
version = "0.1.0"
edition = "2021"
description = "Autogenerated Bellman circuit!"

[dependencies]
bellman = "0.13.1"
ff = "0.12"
bls12_381 = "0.7"
rand = "0.8.5"
"""

MAIN_RS_TEMPLATE = """use std::marker::PhantomData;
use bellman::{ConstraintSystem, SynthesisError, Circuit};
use bellman::groth16::{generate_random_parameters};
use ff::PrimeField;
use bls12_381::Bls12;
use rand::thread_rng;

#[derive(Debug, Default, Clone)]
pub struct GeneratedCircuit<S: PrimeField> {
    pub _phantom: PhantomData<S>
}

impl<S: PrimeField> Circuit<S>
    for GeneratedCircuit<S>
{
    fn synthesize<CS: ConstraintSystem<S>>(
        self,
        cs: &mut CS,
    ) -> Result<(), SynthesisError> {
        {generated_code}
        Ok(())
    }
}

fn main() {
    let params = {
        let c = GeneratedCircuit {
            _phantom: PhantomData
        };

        generate_random_parameters::<Bls12, _, _>(c, &mut rng).unwrap()
    };

    println!("Hello world!");
}
"""


class Context:
    def __init__(self):
        self.vars = []
        self.constrains = []

    def alloc(self):
        v = Variable(self, len(self.vars))
        self.vars.append(v)
        return Number(self, {v.index: 1})

    # A * B == C
    def constrain(self, a, b, c):
        self.constrains.append((a, b, c))

    def mul(self, a, b):
        ret = self.alloc()
        self.constrain(a, b, ret)
        return ret

    def compile(self, path, project_name):
        proj = os.path.join(path, project_name)
        cargo_toml = os.path.join(proj, "Cargo.toml")
        with io.open(cargo_toml, "w") as f:
            f.write(CARGO_TOML_TEMPLATE.format(project_name=project_name))
        src = os.path.join(proj, "src")
        os.makedirs(src, exist_ok=True)
        main_rs = os.path.join(src, "main.rs")

        generated_code = ""

        with io.open(main_rs, "w") as f:
            f.write(MAIN_RS_TEMPLATE.replace("{generated_code}", generated_code))
        subprocess.run(["cargo", "run", "--manifest-path", cargo_toml])


class Variable:
    def __init__(self, ctx, index):
        self.ctx = ctx
        self.index = index

    def __str__(self):
        return "Variable({})".format(self.index)


class Number:
    def __init__(self, ctx, vars):
        self.ctx = ctx
        self.vars = vars

    def __mul__(self, other):
        if type(other) == int:
            return Number(self.ctx, {ind: v * other for (ind, v) in self.vars.items()})
        elif type(other) == Number:
            return self.ctx.mul(self, other)
        else:
            raise Exception()

    def __add__(self, other):
        new_vars = self.vars.copy()
        if type(other) == Number:
            for coeff, v in other.vars.items():
                if v not in new_vars:
                    new_vars[v] = 0
                new_vars[v] += coeff
        else:
            raise Exception()
        return Number(ctx, new_vars)

    def __str__(self):
        return "Number({})".format(self.vars)


ctx = Context()
a = ctx.alloc()
b = ctx.alloc()
ctx.compile(".", "circuit")
